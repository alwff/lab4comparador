
POSTLAB4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000298  0000032c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000298  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800110  00800110  0000033c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000033c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000036c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000003ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000852  00000000  00000000  000003ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006d1  00000000  00000000  00000c3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003e7  00000000  00000000  0000130f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000094  00000000  00000000  000016f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003df  00000000  00000000  0000178c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000177  00000000  00000000  00001b6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001ce2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 8a 00 	jmp	0x114	; 0x114 <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e9       	ldi	r30, 0x98	; 152
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 31       	cpi	r26, 0x17	; 23
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <main>
  9e:	0c 94 4a 01 	jmp	0x294	; 0x294 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setup>:
	
}

void setup(void){ //Se utiliza void cuando no se emplean parámetros
	
	cli(); //Deshabilita interrupciones
  a6:	f8 94       	cli
	
	UCSR0B = 0; //Deshabilita RX y TX
  a8:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	
	// Puerto D como salidas
	DDRD = 0xFF;
  ac:	8f ef       	ldi	r24, 0xFF	; 255
  ae:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0;
  b0:	1b b8       	out	0x0b, r1	; 11
	
	// Puerto B como salidas
	DDRB = 0xFF;
  b2:	84 b9       	out	0x04, r24	; 4
	PORTB = 0;
  b4:	15 b8       	out	0x05, r1	; 5
	
	//Pines PC0 y PC1 como entradas
	DDRC &= ~(1 << PINC4) | ~(1 << PINC5);
  b6:	87 b1       	in	r24, 0x07	; 7
  b8:	87 b9       	out	0x07, r24	; 7
	PORTC |= (1 << PINC4) | (1 << PINC5);
  ba:	88 b1       	in	r24, 0x08	; 8
  bc:	80 63       	ori	r24, 0x30	; 48
  be:	88 b9       	out	0x08, r24	; 8
	
	
	// Interrupción del contador 8 bits
	PCICR |= (1<<PCIE1); // PCIE1 para puerto C
  c0:	e8 e6       	ldi	r30, 0x68	; 104
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	82 60       	ori	r24, 0x02	; 2
  c8:	80 83       	st	Z, r24
	PCMSK1 |= ((1<<PCINT12)|(1<<PCINT13)); // Habilita la interrupción en el puerto C -- PCMSK1 corresponde al puerto C -- PCINT12-PC4 y PCINT13-PC5
  ca:	ec e6       	ldi	r30, 0x6C	; 108
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 81       	ld	r24, Z
  d0:	80 63       	ori	r24, 0x30	; 48
  d2:	80 83       	st	Z, r24
	
	sei(); // Habilita las interrupciones 
  d4:	78 94       	sei
  d6:	08 95       	ret

000000d8 <__vector_21>:
	
}

//Interrupciones
ISR(ADC_vect){
  d8:	1f 92       	push	r1
  da:	0f 92       	push	r0
  dc:	0f b6       	in	r0, 0x3f	; 63
  de:	0f 92       	push	r0
  e0:	11 24       	eor	r1, r1
  e2:	8f 93       	push	r24
  e4:	9f 93       	push	r25
  e6:	ef 93       	push	r30
  e8:	ff 93       	push	r31
	
	valueADC = ADCH;
  ea:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <valueADC+0x1>
  f4:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <valueADC>
	ADCSRA |= (1<<ADIF);
  f8:	ea e7       	ldi	r30, 0x7A	; 122
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	80 61       	ori	r24, 0x10	; 16
 100:	80 83       	st	Z, r24
}
 102:	ff 91       	pop	r31
 104:	ef 91       	pop	r30
 106:	9f 91       	pop	r25
 108:	8f 91       	pop	r24
 10a:	0f 90       	pop	r0
 10c:	0f be       	out	0x3f, r0	; 63
 10e:	0f 90       	pop	r0
 110:	1f 90       	pop	r1
 112:	18 95       	reti

00000114 <__vector_4>:


ISR(PCINT1_vect){
 114:	1f 92       	push	r1
 116:	0f 92       	push	r0
 118:	0f b6       	in	r0, 0x3f	; 63
 11a:	0f 92       	push	r0
 11c:	11 24       	eor	r1, r1
 11e:	8f 93       	push	r24
	
	if (!(PINC & (1 << PINC4))) { 
 120:	34 99       	sbic	0x06, 4	; 6
 122:	06 c0       	rjmp	.+12     	; 0x130 <__vector_4+0x1c>
		// Cuando botón 0 presionado:
		contador8bits++;
 124:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <contador8bits>
 128:	8f 5f       	subi	r24, 0xFF	; 255
 12a:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <contador8bits>
 12e:	1a c0       	rjmp	.+52     	; 0x164 <__vector_4+0x50>
		}
	else if (!(PINC & (1 << PINC5))) {
 130:	35 99       	sbic	0x06, 5	; 6
 132:	06 c0       	rjmp	.+12     	; 0x140 <__vector_4+0x2c>
		// Cuando botón 1 presionado:
		contador8bits--;
 134:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <contador8bits>
 138:	81 50       	subi	r24, 0x01	; 1
 13a:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <contador8bits>
 13e:	12 c0       	rjmp	.+36     	; 0x164 <__vector_4+0x50>
	}
	else if((!(PINC & (1 << PINC4))) && (contador8bits==255))  {
 140:	34 99       	sbic	0x06, 4	; 6
 142:	07 c0       	rjmp	.+14     	; 0x152 <__vector_4+0x3e>
 144:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <contador8bits>
 148:	8f 3f       	cpi	r24, 0xFF	; 255
 14a:	19 f4       	brne	.+6      	; 0x152 <__vector_4+0x3e>
		//Cuando el contador llegué a su máximo (255) y botón 0 presionado, entonces se suma  y regresa a 0
		contador8bits=0;
 14c:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <contador8bits>
 150:	09 c0       	rjmp	.+18     	; 0x164 <__vector_4+0x50>
	}
	else if((!(PINC & (1 << PINC5))) && (contador8bits==255))  {
 152:	35 99       	sbic	0x06, 5	; 6
 154:	07 c0       	rjmp	.+14     	; 0x164 <__vector_4+0x50>
 156:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <contador8bits>
 15a:	8f 3f       	cpi	r24, 0xFF	; 255
 15c:	19 f4       	brne	.+6      	; 0x164 <__vector_4+0x50>
		//Cuando el contador llegué a su máximo (255) y botón 1 presionado, entonces se resta y regresa a 254
		contador8bits=254;
 15e:	8e ef       	ldi	r24, 0xFE	; 254
 160:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <contador8bits>
	}
	else {
		// De lo contrario
		contador8bits=contador8bits;
	}
}
 164:	8f 91       	pop	r24
 166:	0f 90       	pop	r0
 168:	0f be       	out	0x3f, r0	; 63
 16a:	0f 90       	pop	r0
 16c:	1f 90       	pop	r1
 16e:	18 95       	reti

00000170 <initADC>:

void initADC(void){ 
	// Configurando bits de ADC

	// Seleccionando una referencia (Vref)=AVCC=5V
	ADMUX = 0; // Configurando el canal 0
 170:	ec e7       	ldi	r30, 0x7C	; 124
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	10 82       	st	Z, r1
	ADMUX |= (1 << REFS0);
 176:	80 81       	ld	r24, Z
 178:	80 64       	ori	r24, 0x40	; 64
 17a:	80 83       	st	Z, r24
	ADMUX &= ~(1 << REFS1);
 17c:	80 81       	ld	r24, Z
 17e:	8f 77       	andi	r24, 0x7F	; 127
 180:	80 83       	st	Z, r24

	// ADLAR - Justificación hacia la izquierda
	ADMUX |= (1 << ADLAR);
 182:	80 81       	ld	r24, Z
 184:	80 62       	ori	r24, 0x20	; 32
 186:	80 83       	st	Z, r24

	ADCSRA = 0; 
 188:	ea e7       	ldi	r30, 0x7A	; 122
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	10 82       	st	Z, r1
	// ADEN - Habilita o enciende ADC
	ADCSRA |= (1 << ADEN);
 18e:	80 81       	ld	r24, Z
 190:	80 68       	ori	r24, 0x80	; 128
 192:	80 83       	st	Z, r24

	// ADIE - Habilita ISR ADC
	ADCSRA |= (1 << ADIE);
 194:	80 81       	ld	r24, Z
 196:	88 60       	ori	r24, 0x08	; 8
 198:	80 83       	st	Z, r24

	// Ya que nos encontramos en el rango permitido, es posible usar alta resolución 
	// Prescaler 128 > 16MHz / 128 = 125KHz
	ADCSRA |= (1 << ADPS2)|(1 << ADPS1)|(1 << ADPS0);
 19a:	80 81       	ld	r24, Z
 19c:	87 60       	ori	r24, 0x07	; 7
 19e:	80 83       	st	Z, r24
 1a0:	08 95       	ret

000001a2 <main>:
void setup(void);
void initADC(void);

int main(void){ //Función main
	
	setup();
 1a2:	0e 94 53 00 	call	0xa6	; 0xa6 <setup>
	initADC();
 1a6:	0e 94 b8 00 	call	0x170	; 0x170 <initADC>
	
	//LOOP 
	while (1){
		
		ADCSRA |= (1<<ADSC); //Inicia ADC
 1aa:	ea e7       	ldi	r30, 0x7A	; 122
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	80 81       	ld	r24, Z
 1b0:	80 64       	ori	r24, 0x40	; 64
 1b2:	80 83       	st	Z, r24

		have4A = valueADC/16;
 1b4:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <valueADC>
 1b8:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <valueADC+0x1>
 1bc:	9c 01       	movw	r18, r24
 1be:	99 23       	and	r25, r25
 1c0:	14 f4       	brge	.+4      	; 0x1c6 <main+0x24>
 1c2:	21 5f       	subi	r18, 0xF1	; 241
 1c4:	3f 4f       	sbci	r19, 0xFF	; 255
 1c6:	35 95       	asr	r19
 1c8:	27 95       	ror	r18
 1ca:	35 95       	asr	r19
 1cc:	27 95       	ror	r18
 1ce:	35 95       	asr	r19
 1d0:	27 95       	ror	r18
 1d2:	35 95       	asr	r19
 1d4:	27 95       	ror	r18
 1d6:	30 93 13 01 	sts	0x0113, r19	; 0x800113 <have4A+0x1>
 1da:	20 93 12 01 	sts	0x0112, r18	; 0x800112 <have4A>
		have4B = valueADC%16; //Residuo
 1de:	8f 70       	andi	r24, 0x0F	; 15
 1e0:	90 78       	andi	r25, 0x80	; 128
 1e2:	99 23       	and	r25, r25
 1e4:	24 f4       	brge	.+8      	; 0x1ee <main+0x4c>
 1e6:	01 97       	sbiw	r24, 0x01	; 1
 1e8:	80 6f       	ori	r24, 0xF0	; 240
 1ea:	9f 6f       	ori	r25, 0xFF	; 255
 1ec:	01 96       	adiw	r24, 0x01	; 1
 1ee:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__data_end+0x1>
 1f2:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
		
		PORTD = t7s[have4A]; // Saca el valor de la lista correspondiente al puerto 
 1f6:	f9 01       	movw	r30, r18
 1f8:	e0 50       	subi	r30, 0x00	; 0
 1fa:	ff 4f       	sbci	r31, 0xFF	; 255
 1fc:	80 81       	ld	r24, Z
 1fe:	8b b9       	out	0x0b, r24	; 11
		
		PORTB &= ~(1<<PORTB0); //Apaga las LEDs
 200:	85 b1       	in	r24, 0x05	; 5
 202:	8e 7f       	andi	r24, 0xFE	; 254
 204:	85 b9       	out	0x05, r24	; 5
		PORTB &= ~(1<<PORTB2); //Apaga el segundo display
 206:	85 b1       	in	r24, 0x05	; 5
 208:	8b 7f       	andi	r24, 0xFB	; 251
 20a:	85 b9       	out	0x05, r24	; 5
		PORTB |= (1<<PORTB1); //Enciende el primer display
 20c:	85 b1       	in	r24, 0x05	; 5
 20e:	82 60       	ori	r24, 0x02	; 2
 210:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 212:	8f e1       	ldi	r24, 0x1F	; 31
 214:	9e e4       	ldi	r25, 0x4E	; 78
 216:	01 97       	sbiw	r24, 0x01	; 1
 218:	f1 f7       	brne	.-4      	; 0x216 <main+0x74>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <main+0x7a>
 21c:	00 00       	nop
		_delay_ms(5);
		
		PORTD = t7s[have4B]; // Saca el valor de la lista correspondiente al puerto
 21e:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <__data_end>
 222:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <__data_end+0x1>
 226:	e0 50       	subi	r30, 0x00	; 0
 228:	ff 4f       	sbci	r31, 0xFF	; 255
 22a:	80 81       	ld	r24, Z
 22c:	8b b9       	out	0x0b, r24	; 11
		
		PORTB &= ~(1<<PORTB0); //Apaga las LEDs
 22e:	85 b1       	in	r24, 0x05	; 5
 230:	8e 7f       	andi	r24, 0xFE	; 254
 232:	85 b9       	out	0x05, r24	; 5
		PORTB &= ~(1<<PORTB1); //Apaga el primer display
 234:	85 b1       	in	r24, 0x05	; 5
 236:	8d 7f       	andi	r24, 0xFD	; 253
 238:	85 b9       	out	0x05, r24	; 5
		PORTB |= (1<<PORTB2); //Enciende el segundo display
 23a:	85 b1       	in	r24, 0x05	; 5
 23c:	84 60       	ori	r24, 0x04	; 4
 23e:	85 b9       	out	0x05, r24	; 5
 240:	8f e1       	ldi	r24, 0x1F	; 31
 242:	9e e4       	ldi	r25, 0x4E	; 78
 244:	01 97       	sbiw	r24, 0x01	; 1
 246:	f1 f7       	brne	.-4      	; 0x244 <main+0xa2>
 248:	00 c0       	rjmp	.+0      	; 0x24a <main+0xa8>
 24a:	00 00       	nop
		_delay_ms(5);
		
		PORTD = contador8bits; // Muestra en el puerto D lo que hay en el contador
 24c:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <contador8bits>
 250:	8b b9       	out	0x0b, r24	; 11
		
		PORTB |= (1<<PORTB0); //Enciende las LEDs
 252:	85 b1       	in	r24, 0x05	; 5
 254:	81 60       	ori	r24, 0x01	; 1
 256:	85 b9       	out	0x05, r24	; 5
		PORTB &= ~(1<<PORTB1); //Apaga el primer display
 258:	85 b1       	in	r24, 0x05	; 5
 25a:	8d 7f       	andi	r24, 0xFD	; 253
 25c:	85 b9       	out	0x05, r24	; 5
		PORTB &= ~(1<<PORTB2); //Apaga el segundo display
 25e:	85 b1       	in	r24, 0x05	; 5
 260:	8b 7f       	andi	r24, 0xFB	; 251
 262:	85 b9       	out	0x05, r24	; 5
 264:	8f e1       	ldi	r24, 0x1F	; 31
 266:	9e e4       	ldi	r25, 0x4E	; 78
 268:	01 97       	sbiw	r24, 0x01	; 1
 26a:	f1 f7       	brne	.-4      	; 0x268 <main+0xc6>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <main+0xcc>
 26e:	00 00       	nop
		_delay_ms(5);
		
		if ((valueADC) > (contador8bits)) {
 270:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <contador8bits>
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <valueADC>
 27a:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <valueADC+0x1>
 27e:	82 17       	cp	r24, r18
 280:	93 07       	cpc	r25, r19
 282:	24 f4       	brge	.+8      	; 0x28c <main+0xea>
			// Cuando los valores son iguales se enciende la LED alarma
			PORTB |= (1<<PORTB3); 
 284:	85 b1       	in	r24, 0x05	; 5
 286:	88 60       	ori	r24, 0x08	; 8
 288:	85 b9       	out	0x05, r24	; 5
 28a:	8f cf       	rjmp	.-226    	; 0x1aa <main+0x8>
		}
		else {
			// De lo contrario los valores se apaga la LED alarma
			PORTB &= ~(1<<PORTB3);
 28c:	85 b1       	in	r24, 0x05	; 5
 28e:	87 7f       	andi	r24, 0xF7	; 247
 290:	85 b9       	out	0x05, r24	; 5
 292:	8b cf       	rjmp	.-234    	; 0x1aa <main+0x8>

00000294 <_exit>:
 294:	f8 94       	cli

00000296 <__stop_program>:
 296:	ff cf       	rjmp	.-2      	; 0x296 <__stop_program>
